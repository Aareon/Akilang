# C pointers tests

uni {
    x:str="Hello world",
    y=32,
    z:byte=1B,
    q=64,
}

# TODO: add object returns from other functions

def main(){
    print ("String:")
    print (x)
    print ("i32:")
    print (y)

    var t1 = c_obj_ref(x)
    var t2 = c_obj_deref(t1)
    print ("Deref of string ptr:")
    print (t2)

    var t3 = c_ref(y)
    var t4 = c_deref(t3)
    print ("Deref of integer ptr y (32):")
    print (t4)

    print ("Address of string obj:")
    print (c_addr(x))
    print ("Address of y:i32 (32):")
    print (c_addr(y))
    print ("Pointer to string obj:")
    print (c_addr(c_obj_ref(x)))
    print ("Pointer to y:i32:")
    var f1 = c_ref(y)
    print (c_addr(f1))
    print ("Pointer to pointer to y:i32:")
    var f2 = c_ref(c_ref(y))
    print (c_addr(f2))
    print ("Size of pointer:")
    var f3:ptr i8
    print (c_size(f3))
    print ("Size of string struct:")
    print (c_size(x))
    print ("Size of i32:")
    print (c_size(y))
    print ("Size of byte:")
    print (c_size(z))
    print ("Deref of string obj ptr:")
    print (c_obj_deref(c_obj_ref(x)))
    var tx = 32
    print ("i32 (32):")
    print (tx)
    print ("Deref of i32 ptr:")
    print (c_deref(c_ref(tx)))
    
    return 0

    # Dangerous operations:
    # deref a raw (void) pointer - we don't allow void pointers yet
    # write a value to a pointer

}