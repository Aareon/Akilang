
 #general cross-platform functions

 def input(bufsize:i32=1024):str{
    var buf=c_alloc(bufsize)
    var err:i32
    
    gets_s(
        buf, cast(bufsize,u64)
    )
    
    # we don't do anything with this yet,
    # but in time we will
    _get_errno(c_ref(err))

    var s_len = strlen(buf)-1U
    
    var cr=c_ptr_math(
        buf, s_len
    )

    # NT compatibility - strip CRs
    if (c_deref(cr) == 13B) then
        unsafe {
        c_ptr_mod(cr, 0B)
    }

    return str(buf)   
}


@nomod
def print(number :bool) :i32
    printf(c_data('%i\n'), convert(number,u64))

@nomod
def print(number :byte) :i32
    printf(c_data('%c\n'), convert(number,u64))

@nomod
def print(number :u32) :i32
    printf(c_data('%i\n'), cast(number,u64))

@nomod
def print(number :i32) :i32
    printf(c_data('%i\n'), cast(number,u64))

@nomod
def print(number :i8) :i32
    printf(c_data('%i\n'), cast(number,u64))

@nomod
def print(number :u64) :i32
    printf(c_data('%llu\n'), number)

@nomod
def print(number :i64) :i32
    printf(c_data('%llu\n'), cast(number,u64))

@nomod
def print(number :f64) :i32
    printf(c_data('%f\n'), cast(number, u64))

@nomod
def print(string :str) :i32
    printf(c_data('%s\n'), cast(c_data(string), u64))

@nomod
def print(data :ptr u_mem) :i32
    # This is unsafe, and we should find some way of segregating unsafe operations
    printf(c_data('%s\n'), cast(data, u64))

# This is also unsafe, and is being disabled for now
# def print(ptri32 :ptr i32) :i32
#     printf(c_data('%i\n'),cast(c_deref(ptri32),u64))

# in time we'll make these builtins too, as I think they are supported by way of LLVM intrinsics - it'll also be easier to provide support for multiple types that way

def max(a, b)
    if a < b then b else a

def min(a, b)
    if a < b then a else b

def abs(a)
    if a < 0 then -a else a

def factorial(n) 
    if n < 2 then 1 else n * factorial(n-1)

def binary mod 10 (lhs, rhs)
    lhs - (lhs/rhs) * rhs
  
