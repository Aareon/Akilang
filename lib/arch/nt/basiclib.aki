# Microsoft Win32/NT library interfaces



extern SetConsoleOutputCP(codepage :u32) :bool
extern GetConsoleOutputCP() :u32

extern printf(str_fmt :ptr i8, *va) :i32
extern snprintf(str_buf: ptr u_mem, str_size:u_size, str_fmt: ptr i8, *va): i32
extern strlen(str_to_check: ptr u_mem): u_size

extern rand():i32

extern GetProcessHeap():u_size
extern HeapAlloc(handle:u_size, flags:u32, bytes:u_size):ptr u_mem
extern HeapFree(handle:u_size, flags:u32, m:ptr u_mem): bool

extern memcpy_s(dest:ptr u_size, size:u_size, source: ptr u_mem, count: u_size)

extern _getwch():i32
extern gets_s(input:ptr u_mem, bytes:u_size)
extern atoi(string: ptr u_mem): i32

extern _get_errno(errno:ptr i32) :i32

# implementations of above

@inline
def c_strlen(str_to_check: ptr u_mem): u_size
    strlen(str_to_check)

@inline
def c_alloc(bytes:u_size):ptr u_mem
    HeapAlloc(GetProcessHeap(), 8u, bytes)

@inline
def c_alloc(bytes:i32):ptr u_mem
    c_alloc(cast(bytes, u_size))
    # HeapAlloc(GetProcessHeap(), 8u, cast(bytes, u_size))

@inline
def c_free(m:ptr u_mem):bool
    HeapFree(GetProcessHeap(), 0u, m)

def inkey():i32 {
    var key:i32
    key=_getwch()
    if (key==0 or key==224) then key=_getwch()
    return key
}

@inline
def set_codepage(codepage :u32) :bool
    SetConsoleOutputCP(codepage)

@inline
def get_codepage() :u32
    GetConsoleOutputCP()

def rnd(max:i32):i32
    rand()/(32767/max)

####

def int_to_c_str(my_int:i32): ptr u_mem {
    var size = c_size(my_int) * 4U + 1U
    var buffer = c_alloc(size)
    snprintf(buffer, size, c_data('%i'),my_int)
    return buffer
}

def c_str_to_int(my_str:str) :i32 {
    atoi(c_data(my_str))
}