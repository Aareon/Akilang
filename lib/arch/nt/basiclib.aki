# Microsoft Win32/NT library interfaces

extern SetConsoleOutputCP(codepage :u32) :bool
extern GetConsoleOutputCP() :u32

extern printf(str_fmt :ptr i8, *va) :i32
extern snprintf(str_buf: ptr u_size, str_size:u_size, str_fmt: ptr i8, *va): i32
extern strlen(str_to_check: ptr u_size): u_size

extern rand():i32

extern GetProcessHeap():u_size
extern HeapAlloc(handle:u_size, flags:u32, bytes:u_size):ptr u_size
extern HeapFree(handle:u_size, flags:u32, mem:ptr u_size): bool

extern _getwch():i32
extern gets_s(input:ptr u_size, bytes:u_size)

extern _get_errno(errno:ptr i32) :i32

# implementations of above

@inline
def c_strlen(str_to_check: ptr u_size): u_size
    strlen(str_to_check)

@inline
def c_alloc(bytes:u_size):ptr u_size
    HeapAlloc(GetProcessHeap(), 8u, bytes)

@inline
def c_alloc(bytes:i32):ptr u_size
    #c_alloc(cast(bytes, u_size))
    # eventually we can use that when we support inlining
    HeapAlloc(GetProcessHeap(), 8u, cast(bytes, u_size))

@inline
def c_free(mem:ptr u_size):bool
    HeapFree(GetProcessHeap(), 0u, mem)

def inkey():i32 {
    var key:i32
    key=_getwch()
    if (key==0 or key==224) then key=_getwch()
    return key
}

@inline
def set_codepage(codepage :u32) :bool
    SetConsoleOutputCP(codepage)

@inline
def get_codepage() :u32
    GetConsoleOutputCP()

def rnd(max:i32):i32
    rand()/(32767/max)

####

def int_to_c_str(my_int:i32): ptr u_size {
    var size = c_size(my_int)*4U+1U
    var buffer = c_alloc(size)
    snprintf(buffer, size, c_data('%i'),my_int)
    return buffer
}